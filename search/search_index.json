{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to h5pack","text":"<p><code>h5pack</code> is a utility made to pack, analyze and unpack HDF5 audio datasets using data and annotations of various sources. HDF5 is an open-source file format for storing large, complex data. It uses a directory-like structure to organize data within the file. Click here to learn more about HDF5. Among other, HDF5 provides:</p> <ul> <li>Efficient storage: Handles large datasets with chunking and compression, reducing disk space usage.</li> <li>Fast I/O: Optimized for rapid reading/writing of multi-dimensional data, improving data loading speeds.</li> <li>Hierarhical structures: Organizes metadata, features, and audio data efficiently within a single file.</li> <li>Concurrent access: Supports concurrent access, enabling efficient multi-threaded data loading.</li> <li>Scalability: Handles massive datasets without performance degradation, making it ideal for large-scale machine learning tasks.</li> <li>Cross-platform: Works across different OS and programming languages, ensuring flexibility.</li> </ul> <p><code>h5pack</code> was made to go from raw files to HDF5 files and back in a robust, consistent and simple way. It provides a collection of tools to facilitate all the necessary tasks to make it possible:</p> <ul> <li><code>h5pack pack</code>: Converts raw data and/or annotation files into an HDF5 file.</li> <li><code>h5pack unpack</code>: Extracts raw data from an HDF5 file, allowing regeneration of the original input data.</li> <li><code>h5pack virtual</code>: Creates a virtual dataset by combining multiple datasets into a single logical dataset without duplication, enabling seamless access to fragmented or distributed data.</li> <li><code>h5pack info</code>: Displays the contents of an HDF5 file generated with <code>h5pack</code>, providing a quick overview of its structure.</li> <li><code>h5pack checksum</code>: Verifies the integrity of an HDF5 file by checking its checksum to detect potential corruption.</li> </ul>"},{"location":"#guides","title":"Guides","text":"<p>To begin using <code>h5pack</code>, refer to the guides below:</p> <ul> <li>Installation</li> <li>Quickstart</li> <li><code>h5pack pack</code> documentation</li> <li><code>h5pack unpack</code> documentation</li> <li><code>h5pack info</code> documentation</li> <li><code>h5pack virtual</code> documentation</li> <li><code>h5pack checksum</code> documentation</li> </ul>"},{"location":"checksum/","title":"<code>h5pack checksum</code> documentation","text":"<p>Note</p> <p>If you're new to <code>h5pack</code>, please consult our Quickstart guide. Please note that this page is just a quick reference to explain different tool options.</p> <p>This tool allows you to verify the integrity of your <code>.h5</code> files by checking that the stored checksum matches the actual checksum value. Additionally, you can use it to regenerate the checksum file if something has changed and you need to update its checksum value. A checksum file is a <code>.sha256</code> file stored right next to your <code>.h5</code> file. This file contains a list of files and their corresponding checksum values.</p>"},{"location":"checksum/#basic-usage","title":"Basic usage","text":""},{"location":"checksum/#verifying-existing-checkpoints","title":"Verifying existing checkpoints","text":"<pre><code>h5pack checksum &lt;sha256-file&gt;\n</code></pre> <p>The output should look as follows: <pre><code>Verifying checksum in 'dataset.sha256' ...\ndataset.h5  8258bb92f49c2ed032bbe6f1e3bc86132cbc8b7bc0c0e512c4bc6b9888f9aabe [OK]\nChecksum verification completed in 0.2 millisecond(s)\n</code></pre></p>"},{"location":"checksum/#calculating-checksum","title":"Calculating checksum","text":"<pre><code>h5pack checksum &lt;h5-file&gt;\n</code></pre> <p>If the input has a <code>.h5</code> extension or is a folder, the checksum of all <code>.h5</code> files found will be calculated and printed to the screen as follows:</p> <pre><code>Calculating checksum for .h5 files in 'dataset.h5' ...\ndataset.h5  8258bb92f49c2ed032bbe6f1e3bc86132cbc8b7bc0c0e512c4bc6b9888f9aabe\nChecksum calculation completed in 0.1 millisecond(s)\n</code></pre> <p>Additionally, you can use the <code>--save</code> to save the calculated checksum to a <code>.sha256</code> file.</p> <pre><code>h5pack checksum &lt;h5-file&gt; --save &lt;output-sha256-file&gt;\n</code></pre>"},{"location":"checksum/#advanced-settings","title":"Advanced settings","text":""},{"location":"checksum/#recursive-search","title":"Recursive search","text":"<p>To calculate the checksum of multiple <code>.h5</code> files, possibly within nested folders, you can use the <code>-r/--recursive</code> flag. Please note that this option is only available for checksum calculations.</p> <pre><code>h5pack checksum &lt;input-folder-with-h5-files&gt; --recursive\n</code></pre> <p>or using aliases: <pre><code>h5pack checksum &lt;input-folder-with-h5-files&gt; -r\n</code></pre></p>"},{"location":"checksum/#help","title":"Help","text":"<p>To see all available options, run: <pre><code>h5pack checksum --help\n</code></pre></p> <p>or using aliases: <pre><code>h5pack checksum -h\n</code></pre></p>"},{"location":"docs/","title":"Overview","text":"<p>This page offers detailed documentation for each specific tool. To learn more about any tool, click on the links provided below. If you're new to <code>h5pack</code>, we recommend starting with our Quickstart guide.</p>"},{"location":"docs/#tools","title":"Tools","text":"<ul> <li><code>h5pack pack</code> documentation.</li> <li><code>h5pack unpack</code> documentation.</li> <li><code>h5pack info</code> documentation.</li> <li><code>h5pack virtual</code> documentation.</li> <li><code>h5pack checksum</code> documentation.</li> </ul>"},{"location":"info/","title":"<code>h5pack info</code> documentation","text":"<p>Note</p> <p>If you're new to <code>h5pack</code>, please consult our Quickstart guide. Please note that this page is just a quick reference to explain different tool options.</p> <p>This tool can be used to quickly inspect existing <code>.h5</code> files that have been created using <code>h5pack</code>.</p>"},{"location":"info/#basic-usage","title":"Basic usage","text":"<pre><code>h5pack info &lt;h5-file&gt;\n</code></pre> <p>This will output the information of your <code>.h5</code> file. If the file is a Virtual Dataset (VDS), it will also provide information about the linked files.</p>"},{"location":"info/#help","title":"Help","text":"<p>To see all available options, run: <pre><code>h5pack info --help\n</code></pre></p> <p>or using aliases: <pre><code>h5pack info -h\n</code></pre></p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#install-using-pip","title":"Install using pip","text":"<p>The easiest way to install <code>h5pack</code> is through <code>pip</code> by running:</p> <pre><code>pip install h5pack\n</code></pre> <p>After installing <code>h5pack</code> you can verify the installation by running:</p> <pre><code>h5pack --version\n</code></pre> <p>This should output:</p> <pre><code>h5pack version x.y.z yyyy-zzzz developed by Esteban G\u00f3mez (Speech Interaction Technology, Aalto University)\n</code></pre> <p>Where:</p> <ul> <li><code>x.y.z</code> represents the major, minor, and patch version.</li> <li><code>yyyy-zzzz</code> indicates the development start year and the current year.</li> </ul>"},{"location":"install/#install-using-uv","title":"Install using uv","text":"<p><code>uv</code> is a modern python package manager. You can see more details about <code>uv</code> in the official documentation.</p> <p>First, you need to install <code>uv</code> and <code>uvx</code> following the instructions for your operating system in <code>uv</code> website.</p> <p>Then run:</p> <pre><code>uv tool install h5pack\n</code></pre> <p>You can verify the installation running:</p> <pre><code>uv tool run h5pack --version\n</code></pre> <p>or you can use the shortcut version <code>uvx</code>:</p> <pre><code>uvx h5pack --version\n</code></pre> <p>This should output:</p> <pre><code>h5pack version x.y.z yyyy-zzzz developed by Esteban G\u00f3mez (Speech Interaction Technology, Aalto University)\n</code></pre> <p>Where:</p> <ul> <li><code>x.y.z</code> represents the major, minor, and patch version.</li> <li><code>yyyy-zzzz</code> indicates the development start year and the current year.</li> </ul>"},{"location":"install/#whats-next","title":"What's next","text":"<p>Now that you have installed <code>h5pack</code>, check the Quickstart section to begin using it.</p>"},{"location":"license/","title":"License","text":"<p><code>h5pack</code> was developed by Esteban G\u00f3mez, part of the Speech Interaction Technology group from Aalto University and is licensed under CC BY-SA 4.0.</p> <p>If this package contributed to your work, please consider citing it:</p> <pre><code>@misc{h5pack,\n  author = {Esteban G\u00f3mez},\n  title  = {h5pack},\n  year   = 2025,\n  url    = {https://github.com/eagomez2/h5pack}\n}\n</code></pre>"},{"location":"pack/","title":"<code>h5pack pack</code> documentation","text":"<p>Note</p> <p>If you're new to <code>h5pack</code>, please consult our Quickstart guide. Please note that this page is just a quick reference to explain different tool options.</p> <p>This tool converts raw data, annotations, and a configuration file into one or several <code>.h5</code> partitions for easy use in training or data analysis pipelines. Packing data in this format offers faster access and transfer by reducing file system overhead. The HDF5 format also maintains complex data hierarchies and metadata in one container, facilitating consistent organization, cross-language accessibility, and scalability for large datasets.</p>"},{"location":"pack/#basic-usage","title":"Basic usage","text":"<pre><code>h5pack pack --config &lt;config-file&gt; --dataset &lt;dataset-name&gt; --output &lt;output-h5-file&gt;\n</code></pre> <p>or using aliases: <pre><code>h5pack pack -c &lt;config-file&gt; -d &lt;dataset-name&gt; -o &lt;output-h5-file&gt;\n</code></pre></p> <p>If your config file is named <code>h5pack.yaml</code> (the default name), you can omit the <code>-c</code>/<code>--config</code> option: <pre><code>h5pack pack -d &lt;dataset-name&gt; -o &lt;output-h5-file&gt;\n</code></pre></p>"},{"location":"pack/#advanced-settings","title":"Advanced settings","text":""},{"location":"pack/#create-multiple-partitions","title":"Create multiple partitions","text":"<p>You can partition your <code>.h5</code> dataset across multiple files, improving organization and potentially performance. These partitions can be unified using a Virtual Dataset (VDS), allowing you to access all the data through a single logical file.</p> <p>For example, your partition files might be named <code>dataset.pt0.h5</code>, <code>dataset.pt1.h5</code>, and so on. By using VDS, you can create a single virtual file named <code>dataset.h5</code>, which seamlessly integrates the datasets from all partition files. Accessing <code>dataset.h5</code> is equivalent to accessing the combined data from <code>dataset.pt0.h5</code>, <code>dataset.pt1.h5</code>, and other partition files, providing a convenient and efficient way to work with large datasets.</p> <p>Partitions can be divided by a fixed count (e.g., 4 partitions) or by the number of files per partition (e.g., 1000 files per partition).</p>"},{"location":"pack/#fixed-number-of-partitions","title":"Fixed number of partitions","text":"<p>To create a fixed number of partitions (4 in this example), run:</p> <pre><code>h5pack pack --config &lt;config-file&gt; --dataset &lt;dataset-name&gt; --output &lt;output-h5-file&gt; --partitions 4\n</code></pre> <p>or using aliases: <pre><code>h5pack pack -c &lt;config-file&gt; -d &lt;dataset-name&gt; -o &lt;output-h5-file&gt; -p 4\n</code></pre></p>"},{"location":"pack/#number-of-files-per-partition","title":"Number of files per partition","text":"<p>To fit a define number of files per partition (1000 in this example), run: <pre><code>h5pack pack --config &lt;config-file&gt; --dataset &lt;dataset-name&gt; --output &lt;output-h5-file&gt; --files-per-partition 1000\n</code></pre></p> <p>or using aliases: <pre><code>h5pack pack -c &lt;config-file&gt; -d &lt;dataset-name&gt; -o &lt;output-h5-file&gt; -f 1000\n</code></pre></p>"},{"location":"pack/#number-of-workers","title":"Number of workers","text":"<p>To speed up the creation of your partition files, you can increase the number of workers using the <code>-w/--workers</code> option as:</p> <pre><code>h5pack pack --config &lt;config-file&gt; --dataset &lt;dataset-name&gt; --output &lt;output-h5-file&gt; --partitions 4 --workers 4\n</code></pre> <p>or using aliases: <pre><code>h5pack pack -c &lt;config-file&gt; -d &lt;dataset-name&gt; -o &lt;output-h5-file&gt; -p 4 -w 4\n</code></pre></p> <p>This will spawn 4 workers, each handling a single partition concurrently.</p>"},{"location":"pack/#create-virtual-dataset","title":"Create virtual dataset","text":"<p>If you want to automatically create a virtual dataset file that aggregates all partitions as part of a dataset, simply add the <code>--create-virtual</code> flag as follows: <pre><code>h5pack pack -c &lt;config-file&gt; -d &lt;dataset-name&gt; -o &lt;output-h5-file&gt; -p 4 -w 4 --create-virtual\n</code></pre></p> <p>In addition to generating partition files like <code>dataset.pt0.h5</code>, <code>dataset.pt1.h5</code>, and so forth, using the <code>--create-virtual</code> flag will also create a virtual dataset named <code>dataset.h5</code>. This virtual file provides unified access to all partitioned data.</p> <p>Note</p> <p>If your datasets have already been created, please refer to the <code>h5pack virtual</code> tool for integrating them into a virtual dataset.</p>"},{"location":"pack/#help","title":"Help","text":"<p>To see all available options, run: <pre><code>h5pack pack --help\n</code></pre></p> <p>or using aliases: <pre><code>h5pack pack -h\n</code></pre></p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>If you haven't installed <code>h5pack</code> yet, please refer to our Installation guide before proceeding. This guide will help you get up and running with <code>h5pack</code> in minutes. To create an HDF5 dataset using <code>h5pack</code>, you need the following three components:</p> <ul> <li>Data: It is your raw data which may include one or multiple sets of audio files in any of the formats supported by <code>soundfile</code> such was <code>.wav</code> or <code>.flac</code>.</li> <li>Annotations: Any additional data that is related to your audio data and relevant to pack in the dataset such as split (training, validation, test), speaker id or simlilar annotations. It is provided through a <code>.csv</code> file where one column has the path of the audio file and any other column can contain an annotation related to that audio file in any of the data types supported by <code>h5pack</code>.</li> <li>Configuration file: The configuration file is a <code>.yaml</code> file that relates your annotations and your audio data and tell <code>h5pack</code> what to include and how.</li> </ul> <p>Note</p> <p>All the data mentioned below is in the <code>examples/00_annotated-audio-dataset</code> folder of <code>h5pack</code> repository.</p> <p>In the next section we will go through each individual component of the exampled located in <code>examples/00_annotated-audio-dataset</code>. This folder has the following data structure:</p> examples/00_annotated-audio-dataset<pre><code>00_annotated-audio-dataset\n\u251c\u2500\u2500 data\n\u2502 \u251c\u2500\u2500 brownian-noise.flac\n\u2502 \u251c\u2500\u2500 pink-noise.flac\n\u2502 \u2514\u2500\u2500 white-noise.flac\n\u251c\u2500\u2500 dataset.csv\n\u2514\u2500\u2500 h5pack.yaml\n</code></pre> <p>In this case, the datais in the data folder which consist of three <code>.flac</code>files, our annotatios are in the <code>dataset.csv</code> file and the configuration is inside the <code>h5pack.yaml</code> file.</p>"},{"location":"quickstart/#data","title":"Data","text":"<p>It corresponds to the raw data that will be included in the dataset, this is typically one or multiple sets of audio files in formats such as <code>.wav</code> or <code>.flac</code>. The resulting <code>.h5</code> file will consolidate the data from multiple audio files into a single HDF5 file or a set of HDF5 partition files, ensuring efficient storage and access.</p>"},{"location":"quickstart/#annotations","title":"Annotations","text":"<p>Annotations can be incorporated alongside each audio file using a <code>.csv</code> file. Each row in this <code>.csv</code> should include a column with the audio file's path, and the remaining columns can contain supplementary data to be embedded as annotations.</p> <p>In this case, there is an arbitrary <code>Type</code> parameter describing type of noise included in each audio file as a <code>str</code>. The <code>dataset.csv</code> content looks as follow:</p> File Type data/brownian-noise.flac brownian data/pink-noise.flac pink data/white-noise.flac white <p>This <code>.csv</code> can be generated in any way you want. For the most common uses cases we recommend using <code>sndls</code> tool.</p>"},{"location":"quickstart/#configuration-file","title":"Configuration file","text":"<p>The configuration file, typically named <code>h5pack.yaml</code>, is a <code>.yaml</code> file that connects your data and annotations, instructing h5pack on how to render your dataset(s). It consists of specifications for one or more datasets. In this case <code>h5pack.yaml</code> looks as follows (omitting the comments):</p> h5pack.yaml<pre><code>datasets:\n  simple_dataset:\n    attrs:\n      author: Your name\n      description: Your dataset description\n      version: 0.1.0\n\n    data:\n      file: dataset.csv\n      fields:\n        audio:\n          column: file\n          parser: as_audioint16\n        type:\n          column: type\n          parser: as_utf8str\n</code></pre> <p>From this file:</p> <ul> <li><code>dataset</code>: Is the main mandatory key that can contain one or multiple datsets. In this case a single dataset named <code>simple_dataset</code> is included.</li> <li><code>attrs</code>: It is an optional key that can contain arbitrary <code>str</code> attributes to be rendered with your data. Each key corresponds to the attribute name and each value has to be a single <code>str</code> with the value of that specific attribute.</li> <li><code>data</code>: Describes the data to be included in the files by relating your <code>.csv</code> annotations file with your raw data. In this case:<ul> <li><code>file</code> is the annotations file <code>dataset.csv</code></li> <li><code>fields</code> can have one or multiple keys. Each key corresponds to the name of the field to be included in the dataset, and contains a <code>column</code> key with the column from the <code>.csv</code> to be used and a <code>parser</code> selecting the parser used to include that data.</li> </ul> </li> </ul> <p><code>h5pack</code> supports the following parsers:</p> Parser name Resulting data type Example <code>.csv</code> row value <code>as_audioint16</code> Audio files stored as <code>int16</code> <code>/path/to/file.wav</code> <code>as_audiofloat32</code> Audio files stored as <code>float32</code> <code>/path/to/file.wav</code> <code>as_audiofloat64</code> Audio files stored as <code>float64</code> <code>/path/to/file.wav</code> <code>as_int8</code> Single <code>int8</code> value <code>64</code> <code>as_int16</code> Single <code>int16</code> value <code>32767</code> <code>as_float32</code> Single <code>float32</code> value <code>0.707</code> <code>as_float64</code> Single <code>float64</code> value <code>3.146</code> <code>as_listint8</code> List of <code>int8</code> values <code>[0, 127]</code> <code>as_listint16</code> List of <code>int16</code> values <code>[32767, 32767]</code> <code>as_listfloat32</code> List of <code>float32</code> values <code>[0.707, 1.414, ...]</code> <code>as_listfloat64</code> List of <code>float64</code> values <code>[0.505, 2.125, ...]</code> <code>as_utf8str</code> Single <code>str</code> value <code>hello_world</code> <p>In this case, there a single set of audio files from the <code>file</code> column and saved as <code>int16</code> (<code>as_audioint16</code>) in the <code>audio</code> field, and a <code>str</code> from the <code>type</code> column and saved as <code>str</code> (<code>as_utf8str</code>).</p>"},{"location":"quickstart/#rendering-the-dataset-with-h5pack-pack","title":"Rendering the dataset with <code>h5pack pack</code>","text":"<p>Now that all required files are ready, we can use <code>h5pack pack</code> tool to create the actual <code>.h5</code> file. Now run <pre><code>h5pack pack --config h5pack.yaml --dataset simple_dataset --output simple_dataset.h5\n</code></pre></p> <p>This will result in the following output: <pre><code>Using root folder '/path/to/h5pack/examples/00_annotated-audio-dataset'\nValidating configuration file 'h5pack.yaml' ...\nConfiguration file validation completed\nValidating input data ...\nValidating data of 'audio' field ...\nValidation of 'audio' field data completed\nValidating data of 'type' field ...\nValidation of 'type' field data completed\nInput data validation completed\nGenerating 1 partition spec(s) ...\nPartition spec(s) completed\n1 partition(s) will be created\nDo you want to continue? [y/n]:\n</code></pre></p> <p>Once you have executed the previous required commands, you will need to confirm by typing <code>y</code> and pressing <code>Enter</code> when prompted. Upon confirmation, two files will be generated: <code>simple_datase.h5</code> and <code>simple_dataset.sha256</code>. The <code>simple_datase.h5</code> file is your dataset, now ready for use, while the <code>simple_dataset.sha256</code> file contains the checksum for <code>simple_dataset.h5</code>. You can use this checksum file later to verify the integrity of your dataset.</p> <p>For more options available with the <code>h5pack pack</code> tool, you can run <pre><code>h5pack pack --help\n</code></pre></p> <p>This tool allows customization of several aspects, including specifying the number of partitions for the output file and determining the number of workers that should be used to efficiently render the resulting files.</p>"},{"location":"quickstart/#inspecting-the-dataset-with-h5pack-info","title":"Inspecting the dataset with <code>h5pack info</code>","text":"<p>With the file now generated, you can easily inspect its content using the <code>h5pack info</code> tool. To do so, simply run the following command: <pre><code>h5pack info simple_dataset.h5\n</code></pre></p> <p>It will output <pre><code>Input file: 'simple_dataset.h5'\nFile attribute(s):\n  - author:        Your name\n  - creation_date: 2025-10-25 11:17:37\n  - description:   Your dataset description\n  - producer:      h5pack 1.1.0\n  - version:       0.1.0\nData group 'data':\n  - 'audio' attribute(s):\n    - parser:      as_audioint16\n    - sample_rate: 16000\n  - 'audio' data attribute(s):\n    - shape: (3, 16000)\n    - dtype: int16\n  - 'audio__filepath' data attribute(s):\n    - shape: (3,)\n    - dtype: object\n  - 'type' attribute(s):\n    - parser: as_utf8str\n  - 'type' data attribute(s):\n    - shape: (3,)\n    - dtype: object\n</code></pre></p> <p>This information allows you to swiftly verify the contents of your file. In this example, the file contains three audio samples, each with a duration of one second and sampled at a rate of 16 kHz, resulting in 16,000 samples per audio clip.</p>"},{"location":"quickstart/#corroborating-integrity-with-h5pack-checksum","title":"Corroborating integrity with <code>h5pack checksum</code>","text":"<p>To verify the integrity of your file, run the following command: <pre><code>h5pack checksum simple_dataset.sha256\n</code></pre></p> <p>The command will output: <pre><code>Verifying checksum in 'simple_dataset.sha256' ...\nsimple_dataset.h5   cefeb61ce741bfa4a25cf54069e73d466fa9bdc2093d461ca30f381f6606eb79 [OK]\nChecksum verification completed in 0.2 millisecond(s)\n</code></pre></p> <p>Using this tool, you can consistently check for any potentially corrupted files.</p>"},{"location":"quickstart/#unpacking-the-dataset-with-h5pack-unpack","title":"Unpacking the dataset with <code>h5pack unpack</code>","text":"<p>You also have the option to convert your .h5 files back into their original constituent files using the <code>h5pack unpack</code> tool. To do it, simply run <pre><code>h5pack unpack simple_dataset.h5 --output simple_dataset\n</code></pre></p> <p>This process creates a <code>simple_dataset</code> folder, which includes the corresponding data, annotations file, and configuration file.</p> <pre><code>simple_dataset\n\u251c\u2500\u2500 data\n\u2502   \u2514\u2500\u2500 audio\n\u2502       \u251c\u2500\u2500 brownian-noise.flac\n\u2502       \u251c\u2500\u2500 pink-noise.flac\n\u2502       \u2514\u2500\u2500 white-noise.flac\n\u251c\u2500\u2500 dataset.csv\n\u2514\u2500\u2500 h5pack.yaml\n</code></pre> <p>The generated files are structured so that you can promptly repack them into <code>.h5</code> file(s) if desired.</p>"},{"location":"quickstart/#conclusion","title":"Conclusion","text":"<p>You should now be able to manage, verify, and repack your data to ensure its integrity and flexibility for future use. For more information on additional tools, including those not covered in this Quickstart guide, visit the Documentation section.</p>"},{"location":"unpack/","title":"<code>h5pack unpack</code> documentation","text":"<p>Note</p> <p>If you're new to <code>h5pack</code>, please consult our Quickstart guide. Please note that this page is just a quick reference to explain different tool options.</p> <p>This tool converts <code>.h5</code> files created with <code>h5pack</code> back into their constituent files. Additionally, it automatically generates a configuration <code>.yaml</code> file and an annotations <code>.csv</code> file, enabling you to repack the data using <code>h5pack pack</code>.</p>"},{"location":"unpack/#basic-usage","title":"Basic usage","text":"<pre><code>h5pack unpack &lt;h5-file&gt;\n</code></pre> <p>This will create an output folder wich the same name as your <code>.h5</code> file.</p>"},{"location":"unpack/#advanced-settings","title":"Advanced settings","text":"<p>To specify the output folder path, you can use the <code>-o/--output</code> option as follows:</p> <pre><code>h5pack unpack &lt;h5-file&gt; --output &lt;output-folder&gt;\n</code></pre> <p>or using aliases:</p> <pre><code>h5pack unpack &lt;h5-file&gt; -o &lt;output-folder&gt;\n</code></pre>"},{"location":"unpack/#help","title":"Help","text":"<p>To see all available options, run: <pre><code>h5pack unpack --help\n</code></pre></p> <p>or using aliases: <pre><code>h5pack unpack -h\n</code></pre></p>"},{"location":"virtual/","title":"<code>h5pack virtual</code> documentation","text":"<p>Note</p> <p>If you're new to <code>h5pack</code>, please consult our Quickstart guide. Please note that this page is just a quick reference to explain different tool options.</p> <p>This tool takes two or more <code>.h5</code> partition files created with <code>h5pack</code> and creates a Virtual Dataset (VDS), allowing you to access all the data through a single logical file.</p>"},{"location":"virtual/#basic-usage","title":"Basic usage","text":"<pre><code>h5pack virtual &lt;input-file-0&gt; &lt;input-file-1&gt; ... --output &lt;output-h5-file&gt;\n</code></pre> <p>or using aliases:</p> <pre><code>h5pack virtual &lt;input-file-0&gt; &lt;input-file-1&gt; ... -o &lt;output-h5-file&gt;\n</code></pre> <p>This will result in a single <code>.h5</code> file that acts as a link to all the data from each input file.</p> <p>Warning</p> <p>When using relative paths in Virtual Dataset (VDS), they are typically resolved relative to the location of the VDS file itself. If you run a script from a different location and attempt to load the data, the relative paths are still anchored to the VDS file's location, not the location from which the script is executed.</p> <p>If for your specific use case using absolute paths is more convenient, you can use the <code>--force-abspath</code> flag. Additionally, you can use <code>h5pack info</code> to check the validity of your file paths.</p>"},{"location":"virtual/#advanced-settings","title":"Advanced settings","text":""},{"location":"virtual/#adding-additional-attributes","title":"Adding additional attributes","text":"<p>You can add additional attributes to the VDS by using the <code>-a/--attrs</code> option. The arguments to this option should be key/value pairs. All values will be parsed as a string. <pre><code>h5pack virtual &lt;input-file-0&gt; &lt;input-file-1&gt; --attrs key0 value0 key1 value1 ... --output &lt;output-h5-file&gt;\n</code></pre></p> <p>or using aliases: <pre><code>h5pack virtual &lt;input-file-0&gt; &lt;input-file-1&gt; -a key0 value0 key1 value1 ... -o &lt;output-h5-file&gt;\n</code></pre></p>"},{"location":"virtual/#recursive-search","title":"Recursive search","text":"<p>Oftentimes you may have folders or nested folders containing multiple <code>.h5</code> files that you want to use to create a VDS. In such cases, you can provide the parent folder as input and use the <code>-r/--recursive</code> option to make the search recursive.</p> <pre><code>h5pack virtual &lt;input-folder&gt; --output &lt;output-h5-file&gt; --recursive\n</code></pre> <p>or sing aliases: <pre><code>h5pack virtual &lt;input-folder&gt; -o &lt;output-h5-file&gt; -r\n</code></pre></p>"},{"location":"virtual/#selecting-or-filtering-multiple-files-from-a-folder","title":"Selecting or filtering multiple files from a folder","text":"<p>You may also want to easily select or filter a subset of all files. In these cases you can use the <code>-s/--select</code> or <code>-f/--filter</code> option.</p> <p>For selecting a subset of files you can run: <pre><code>h5pack virtual &lt;input-folder&gt; --output &lt;output-h5-file&gt; --select &lt;select-expression&gt; --recursive\n</code></pre></p> <p>or using aliases: <pre><code>h5pack virtual &lt;input-folder&gt; -o &lt;output-h5-file&gt; -s &lt;select-expression&gt; -r\n</code></pre></p> <p>For filtering out a subset of files you can run: <pre><code>h5pack virtual &lt;input-folder&gt; --output &lt;output-h5-file&gt; --filter &lt;filter-expression&gt; --recursive\n</code></pre></p> <p>or using aliases: <pre><code>h5pack virtual &lt;input-folder&gt; -o &lt;output-h5-file&gt; -f &lt;filter-expression&gt; -r\n</code></pre></p>"},{"location":"virtual/#forcing-absolute-paths","title":"Forcing absolute paths","text":"<p>If you want to force all the paths included in the VDS to be absolute paths regardless of how they are provided, you can use the <code>--force-absppath</code> flag as follows:</p> <pre><code>h5pack virtual &lt;input-folder&gt; --output &lt;output-h5-file&gt; --force-abspath\n</code></pre>"},{"location":"virtual/#help","title":"Help","text":"<p>To see all available options, run: <pre><code>h5pack virtual --help\n</code></pre></p> <p>or using aliases: <pre><code>h5pack virtual -h\n</code></pre></p>"}]}